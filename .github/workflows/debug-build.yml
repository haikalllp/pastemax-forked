name: Debug Build Process

on:
  workflow_dispatch: # Allow manual triggering
  push:
    tags:
      - 'debug-v*' # Special tag prefix for debugging

permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write

jobs:
  debug_build:
    name: Debug ${{ matrix.os }} Build
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        # os: [macos-latest] # Start with just macOS for debugging
        os: [macos-latest, ubuntu-latest, windows-latest] # Uncomment for all platforms

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for potential debugging needs

      - name: System Information
        run: |
          echo "==== SYSTEM INFO ===="
          echo "OS: ${{ runner.os }}"
          echo "Github ref: ${{ github.ref }}"
          echo "Github SHA: ${{ github.sha }}"
          if [ "${{ runner.os }}" == "Windows" ]; then
            echo "Architecture: $env:PROCESSOR_ARCHITECTURE"
            echo "Python: $(python --version 2>&1 || echo 'not installed')"
            echo "Disk space:"
            Get-PSDrive -PSProvider FileSystem
          else
            echo "Architecture: $(uname -m)"
            echo "Python: $(python3 --version || echo 'not installed')"
            echo "Disk space:"
            df -h
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Node.js & NPM Info
        run: |
          echo "==== NODE INFO ===="
          node --version
          npm --version
          if [ "${{ runner.os }}" == "Windows" ]; then
            npm config list || echo "Cannot list npm config"
            echo "NODE_PATH: $env:NODE_PATH"
            echo "Path:"
            echo $env:PATH
          else
            npm config list || echo "Cannot list npm config"
            echo "NODE_PATH: $NODE_PATH"
            echo "Path:"
            echo $PATH
          fi

      - name: Install dependencies
        run: |
          echo "==== INSTALLING DEPENDENCIES ===="
          npm ci --verbose

      - name: Debug project structure
        run: |
          echo "==== PROJECT STRUCTURE ===="
          if [ "${{ runner.os }}" == "Windows" ]; then
            Get-ChildItem -Recurse -File | Where-Object { $_.FullName -notmatch "node_modules" -and $_.FullName -notmatch "^\." } | ForEach-Object { $_.FullName } | Sort-Object
            
            echo "==== PACKAGE.JSON CONTENT ===="
            Get-Content package.json
          else
            find . -type f -not -path "*/node_modules/*" -not -path "*/\.*" | sort
            
            echo "==== PACKAGE.JSON CONTENT ===="
            cat package.json
          fi

      - name: Build step
        run: |
          echo "==== BUILDING APPLICATION ===="
          npm run build

          echo "==== BUILD OUTPUT ===="
          if [ "${{ runner.os }}" = "Windows" ]; then
            dir dist || echo "dist directory not found!"
            if (Test-Path dist) { (Get-ChildItem -Recurse -File dist | Measure-Object).Count } else { echo "No files in dist" }
          else
            ls -la dist || echo "dist directory not found!"
            find dist -type f | wc -l || echo "No files in dist"
          fi

      - name: Debug main.js
        run: |
          echo "==== MAIN.JS CONTENT ===="
          if [ "${{ runner.os }}" == "Windows" ]; then
            Get-Content main.js || echo "main.js not found!"
          else
            cat main.js || echo "main.js not found!"
          fi

      - name: Create directories
        run: |
          echo "==== ENSURING DIRECTORIES ===="
          if [ "${{ runner.os }}" == "Windows" ]; then
            if (-not (Test-Path release-builds)) { New-Item -Path release-builds -ItemType Directory }
            dir release-builds
          else
            mkdir -p release-builds
            ls -la release-builds
          fi

      - name: Run electron-builder directly
        run: |
          echo "==== RUNNING ELECTRON-BUILDER DIRECTLY ===="
          if [ "${{ runner.os }}" == "Windows" ]; then
            npx electron-builder --win --publish=never --debug
          elif [ "${{ runner.os }}" == "Linux" ]; then
            npx electron-builder --linux --publish=never --debug
          elif [ "${{ runner.os }}" == "macOS" ]; then
            npx electron-builder --mac --publish=never --debug
          fi

      - name: Check output
        run: |
          echo "==== CHECKING OUTPUT ===="
          if [ "${{ runner.os }}" == "Windows" ]; then
            Get-ChildItem -Recurse -Path . -Include *.dmg,*.exe,*.AppImage,*.zip
            
            echo "==== RELEASE BUILDS DIRECTORY ===="
            dir release-builds || echo "release-builds directory not found after packaging!"
            
            echo "==== DEEP LIST OF OUTPUT ===="
            Get-ChildItem -Recurse -Path release-builds -File | ForEach-Object { $_.FullName } || echo "No files in release-builds"
          else
            find . -name "*.dmg" -o -name "*.exe" -o -name "*.AppImage" -o -name "*.zip"
            
            echo "==== RELEASE BUILDS DIRECTORY ===="
            ls -la release-builds || echo "release-builds directory not found after packaging!"
            
            echo "==== DEEP LIST OF OUTPUT ===="
            find release-builds -type f || echo "No files in release-builds"
          fi

      - name: Upload debug artifacts
        uses: actions/upload-artifact@v4
        with:
          name: debug-${{ runner.os }}-logs
          path: |
            package.json
            main.js
            release-builds/**
            dist/**
            ~/.electron-builder/**
          if-no-files-found: warn

      - name: Create debug release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/debug-v')
        with:
          files: release-builds/**/*
          draft: true
          prerelease: true
          name: 'Debug Build ${{ github.ref_name }}'
          body: |
            This is a debug build created by the debug-build workflow.
            OS: ${{ runner.os }}
            Node: $(node -v)
            Date: $(date)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
